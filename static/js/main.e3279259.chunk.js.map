{"version":3,"sources":["components/containers/Main/index.js","helpers/linksConfig.js","components/views/Home/index.js","components/views/TalentProcesses/index.js","components/views/MGPD/index.js","components/containers/Nav/index.js","Routes.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["Main","children","location","useLocation","useState","classNames","setClassNames","showChildren","setShowChildren","console","log","useEffect","window","setTimeout","concat","className","linksConfig","path","exact","label","component","to","Nav","links","useMemo","map","isActive","pathname","key","Routes","routes","Router","href","indexOf","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAiCeA,G,MA3BF,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACLC,EAAWC,cADQ,EAEWC,mBAJlB,wBAEO,mBAElBC,EAFkB,KAENC,EAFM,OAGeF,oBAAS,GAHxB,mBAGlBG,EAHkB,KAGJC,EAHI,KAkBzB,OAbAC,QAAQC,IAAI,iBAEZC,qBAAU,WACNH,GAAgB,GAChBF,EAXc,wBAYdM,OAAOC,YAAW,WACdL,GAAgB,KACjB,KACHI,OAAOC,YAAW,WACdP,EAhBU,uBAgBkBQ,OAAO,eACpC,OACJ,CAACb,EAAUC,IAGV,8BACI,yBAAKa,UAAWV,GACXE,EAAeN,EAAW,SCJ5Be,EAnBK,CAChB,CACIC,KAAM,IACNC,OAAO,EACPC,MAAO,OACPC,UCLK,WACT,OACI,kBAAC,EAAD,KACI,yBAAKL,UAAU,QACX,6BACI,gCACI,0CACA,uBAAGA,UAAU,YAAb,kBAGR,6BACI,6BACI,mDAEJ,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,YACX,kBAAC,IAAD,CAAMM,GAAG,sCACL,yBAAKN,UAAU,eACX,kEAEJ,yBAAKA,UAAU,aACX,wDDdhC,CACIE,KAAM,oBACNE,MAAO,mBACPC,UEZgB,WACpB,OACI,yBAAKL,UAAU,uBFYnB,CACIE,KAAM,qCACNE,MAAO,oCACPC,UGjBK,WACT,OACI,yBAAKL,UAAU,YC+BRO,G,MA9BH,WACR,IAAMpB,EAAWC,cAEXoB,EAAQC,mBAAQ,WAClB,OAAOR,EAAYS,KAAI,YAAoB,IAAlBR,EAAiB,EAAjBA,KAAME,EAAW,EAAXA,MACrBO,EAAWxB,EAASyB,WAAaV,EACvC,OACI,yBAAKW,IAAKX,EAAMF,UAAS,kBAAaW,EAAW,UAAY,KACzD,kBAAC,IAAD,CAAML,GAAIJ,GACN,8BAAOE,UAKxB,CAACjB,IAEJ,OACI,6BACI,yBAAKa,UAAU,uBACX,yBAAKA,UAAU,aACX,kBAAC,IAAD,CAAMM,GAAG,OAEb,yBAAKN,UAAU,uBACVQ,OCJNM,EAnBA,WACX,IAAMC,EAASd,EAAYS,KAAI,gBAAER,EAAF,EAAEA,KAAMC,EAAR,EAAQA,MAAOE,EAAf,EAAeA,UAAf,OAC3B,kBAAC,IAAD,CACIQ,IAAKX,EACLC,MAAOA,EACPD,KAAMA,EACNG,UAAWA,OAGnB,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,IAAD,KACSU,KCDNC,EAbA,WAEd,OADkBnB,OAAOV,SAAS8B,KAAKC,QAAQ,WAAa,EAE3D,kBAAC,IAAD,KACC,kBAAC,EAAD,OAGD,kBAAC,IAAD,KACC,kBAAC,EAAD,Q,MCCYC,MATf,WACE,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,QCKcoB,QACW,cAA7BvB,OAAOV,SAASkC,UAEe,UAA7BxB,OAAOV,SAASkC,UAEhBxB,OAAOV,SAASkC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e3279259.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport './Main.css';\r\n\r\nconst baseClassName = 'main-inner-container'\r\n\r\nconst Main = ({children}) => {\r\n    const location = useLocation();\r\n    const [classNames, setClassNames] = useState(baseClassName);\r\n    const [showChildren, setShowChildren] = useState(false);\r\n\r\n    console.log('render <Main>')\r\n\r\n    useEffect(() => {\r\n        setShowChildren(false);\r\n        setClassNames(baseClassName)\r\n        window.setTimeout(() => {\r\n            setShowChildren(true);\r\n        }, 200);\r\n        window.setTimeout(() => {\r\n            setClassNames(baseClassName.concat(' fade-in'));\r\n        }, 500);\r\n    }, [children, location]);\r\n\r\n    return (\r\n        <main>\r\n            <div className={classNames}>\r\n                {showChildren ? children : null}\r\n            </div>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Main;","import Home from '../components/views/Home';\r\nimport TalentProcesses from '../components/views/TalentProcesses';\r\nimport MGPD from '../components/views/MGPD';\r\n\r\nconst linksConfig = [\r\n    {\r\n        path: '/',\r\n        exact: true,\r\n        label: 'Home',\r\n        component: Home\r\n    },\r\n    {\r\n        path: '/talent-processes',\r\n        label: 'Talent Processes',\r\n        component: TalentProcesses\r\n    },\r\n    {\r\n        path: '/making-great-promotions-decisions',\r\n        label: 'Making Great Promotions Decisions',\r\n        component: MGPD\r\n    }\r\n];\r\n\r\nexport default linksConfig;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Main from '../../containers/Main';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <Main>\r\n            <div className=\"home\">\r\n                <div>\r\n                    <header>\r\n                        <h1>Minae Choi</h1>\r\n                        <p className=\"subtitle\">LUX Designer</p>\r\n                    </header>\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        <h2>View work examples</h2>\r\n                    </div>\r\n                    <div className=\"card-display\">\r\n                        <div className=\"nav-card\">\r\n                            <Link to=\"/making-great-promotions-decisions\">\r\n                                <div className=\"card-header\">\r\n                                    <h3>Making Great Promotions Decisions</h3>\r\n                                </div>\r\n                                <div className=\"card-body\">\r\n                                    <p>Description here</p>\r\n                                </div>\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Main>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst TalentProcesses = () => {\r\n    return (\r\n        <div className=\"talent-processes\">\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TalentProcesses;","import React from 'react';\r\n\r\nconst MGPD = () => {\r\n    return (\r\n        <div className=\"mgpd\">\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MGPD;","import React, { useMemo } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport linksConfig from '../../../helpers/linksConfig';\r\nimport './Nav.css';\r\n\r\nconst Nav = () => {\r\n    const location = useLocation();\r\n\r\n    const links = useMemo(() => {\r\n        return linksConfig.map(({path, label}) => {\r\n            const isActive = location.pathname === path;\r\n            return (\r\n                <div key={path} className={`nav-link${isActive ? ' active' : ''}`}>\r\n                    <Link to={path}>\r\n                        <span>{label}</span>\r\n                    </Link>\r\n                </div>\r\n            );\r\n        })\r\n    }, [location]);\r\n\r\n    return (\r\n        <nav>\r\n            <div className=\"nav-inner-container\">\r\n                <div className=\"nav-brand\">\r\n                    <Link to=\"/\"></Link>\r\n                </div>\r\n                <div className=\"nav-links-container\">\r\n                    {links}\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Nav from './components/containers/Nav';\r\nimport linksConfig from './helpers/linksConfig';\r\n\r\nconst Routes = () => {\r\n    const routes = linksConfig.map(({path, exact, component}) => (\r\n        <Route\r\n            key={path}\r\n            exact={exact}\r\n            path={path}\r\n            component={component}\r\n        />\r\n    ));\r\n    return (\r\n        <>\r\n            <Nav/>\r\n            <Switch>\r\n                    {routes}\r\n            </Switch>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Routes;","import React from 'react';\r\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\r\nimport Routes from './Routes';\r\n\r\nconst Router = () => {\r\n\tconst isGHPages = window.location.href.indexOf('github') > -1;\r\n\treturn isGHPages ? (\r\n\t\t<HashRouter>\r\n\t\t\t<Routes/>\r\n\t\t</HashRouter>\r\n\t) : (\r\n\t\t<BrowserRouter>\r\n\t\t\t<Routes/>\r\n\t\t</BrowserRouter>\r\n\t);\r\n}\r\n\r\nexport default Router;","import React from 'react';\nimport Router from './Router';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Router>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}